section  .data

; -----
;  Define standard constants.

TRUE		equ	1
FALSE		equ	0

SUCCESS		equ	0			; successful operation
NOSUCCESS	equ	1

STDIN		equ	0			; standard input
STDOUT		equ	1			; standard output
STDERR		equ	2			; standard error

SYS_read	equ	0			; code for read
SYS_write	equ	1			; code for write
SYS_open	equ	2			; code for file open
SYS_close	equ	3			; code for file close
SYS_fork	equ	57			; code for fork
SYS_exit	equ	60			; code for terminate
SYS_creat	equ	85			; code for file open/create
SYS_time	equ	201			; code for get time

LF		equ	10
SPACE		equ	" "
NULL		equ	0
ESC		equ	27

; -----
;  OpenGL constants

GL_COLOR_BUFFER_BIT	equ	16384
GL_POINTS		equ	0
GL_POLYGON		equ	9
GL_PROJECTION		equ	5889

GLUT_RGB		equ	0
GLUT_SINGLE		equ	0

; -----
;  Define program specific constants.

R1_MIN		equ	0
R1_MAX		equ	250			; 250(10) = 1054(6)

R2_MIN		equ	1			; 1(10) = 1(13)
R2_MAX		equ	250			; 250(10) = 1054(6)

OP_MIN		equ	1			; 1(10) = 1(13)
OP_MAX		equ	250			; 250(10) = 1054(6)

SP_MIN		equ	1			; 1(10) = 1(13)
SP_MAX		equ	100			; 100(10) = 244(6)

X_OFFSET	equ	320
Y_OFFSET	equ	240

; -----
;  Variables for getRadii procedure.

errUsage	db	"Usage:  ./spiro -r1 <senary number> "
		db	"-r2 <senary number> -op <senary number> "
		db	"-sp <senary number> -cl <b/g/r/y/p/w>"
		db	LF, NULL
errBadCL	db	"Error, invalid or incomplete command line arguments."
		db	LF, NULL

errR1sp		db	"Error, radius 1 specifier incorrect."
		db	LF, NULL
errR1value	db	"Error, radius 1 value must be between 0 and 1054(6)."
		db	LF, NULL

errR2sp		db	"Error, radius 2 specifier incorrect."
		db	LF, NULL
errR2value	db	"Error, radius 2 value must be between 1 and 1054(6)."
		db	LF, NULL

errOPsp		db	"Error, offset position specifier incorrect."
		db	LF, NULL
errOPvalue	db	"Error, offset position value must be between 1 and 1054(6)."
		db	LF, NULL

errSPsp		db	"Error, speed specifier incorrect."
		db	LF, NULL
errSPvalue	db	"Error, speed value must be between 1 and 244(6)."
		db	LF, NULL

errCLsp		db	"Error, color specifier incorrect."
		db	LF, NULL
errCLvalue	db	"Error, color value must be b, g, r, p, or w. "
		db	LF, NULL

; -----
;  Variables for spirograph routine.

fltOne		dd	1.0
fltZero		dd	0.0
fltTmp1		dd	0.0
fltTmp2		dd	0.0

t		dd	0.0			; loop variable
s		dd	1.0			; phase variable
tStep	dd	0.005		; t step
sStep	dd	0.0			; s step
x		dd	0			; current x
y		dd	0			; current y

r1		dd	0.0			; radius 1 (float)
r2		dd	0.0			; radius 2 (float)
ofp		dd	0.0			; offset position (float)
radii   dd	0.0			; tmp location for (radius1+radius2)

scale		dd	5000.0		; speed scale
limit		dd	360.0		; for loop limit
iterations	dd	0			; set to 360.0/tStep

red		    db	0			; 0-255
green		db	0			; 0-255
blue		db	0			; 0-255

; ------------------------------------------------------------

section  .text

; -----
;  External references for openGL routines.

extern	glutInit, glutInitDisplayMode, glutInitWindowSize, glutInitWindowPosition
extern	glutCreateWindow, glutMainLoop
extern	glutDisplayFunc, glutIdleFunc, glutReshapeFunc, glutKeyboardFunc
extern	glutSwapBuffers, gluPerspective, glutPostRedisplay
extern	glClearColor, glClearDepth, glDepthFunc, glEnable, glShadeModel
extern	glClear, glLoadIdentity, glMatrixMode, glViewport
extern	glTranslatef, glRotatef, glBegin, glEnd, glVertex3f, glColor3f
extern	glVertex2f, glVertex2i, glColor3ub, glOrtho, glFlush, glVertex2d

extern	cosf, sinf

; ******************************************************************
;  Function getRadii()
;	Gets radius 1, radius 2, offset positionm and rotation
;	speedvalues and color code letter from the command line.

;	Performs error checking, converts ASCII/senary string
;	to integer.  Required command line format (fixed order):
;	  "-r1 <senary numberl> -r2 <senary number> -op <senary number> 
;			-sp <senary number> -cl <color>"

; HLL
;	stat = getRadii(argc, argv, &radius1, &radius2, &offPos,
;						&speed, &color);

; -----
;  Arguments:
;	- ARGC										; rdi
;	- ARGV										; rsi
;	- radius 1, double-word, address			; rdx
;	- radius 2, double-word, address			; rcx
;	- offset Position, double-word, address		; r8
;	- speed, double-word, address				; r9
;	- circle color, byte, address				; <reg>+16 (stack)




;	YOUR CODE GOES HERE

global  getRadii
getRadii:

; Notes
; mov r8, [rsi+8]
; cmp dword [r8], "-r1"  do this bc r8 has the address of the argument, but when you do dword [r8] you pull the value at that address

; push rbp
; mov rbp, rsp
; push the registers I need

; do a read (not an actual syscall read)
    ; Argv and argc have already done that so you basically need to just check each portion 
    ; So check argv+8 for "-r1" then check argv+16 for "-r2" 

; REMEMBER TO ADD THAT IF ITS SUCCESSFUL CHANGE rax to 1 (true) otherwise it remains 0 (false)

push rbp
mov rbp, rsp
push rbx
push r12      ; register to save the address of input when checking if the right input was entered
push r13
push r14
push r15

; Check Usage
cmp rdi, 1
je usageError


; verify ARGC
verifyCount:            ; checking if argc is equal to 11
   cmp rdi, 11
   jne badCL

; Check for -r1
mov r12, [rsi+8]		; moving the first address of the input into r12
cmp dword [r12], "-r1"  ; check the value in r12 for "-r1"
jne invalidR1

mov r10, 0              ; index counter
mov r15, 0              ; used to sum
mov rax, 0
push rdx                ; preserving rdx bc mul clears it

; Checking -r1's value
mov r12, [rsi+16]		            ; Gets the address of the value for -r1

summingNumbersLoop1:
cmp byte [r12+r10], 0x30			; Compare r12 to 0 for base 6
jl incorrectR1			            ; if less than 0/NULL then its invalid 
cmp byte [r12+r10], 0x35			; Compare r12 to 5 for base 6
jg incorrectR1			            ; if greater than 5 then it is invalid 

mov r15b, byte [r12+r10]			; mov address of r12 into r15 
sub r15, 0x30			            ; subtract 
add rax, r15                        ; add r15 to summing register (rax to mulitply)

; Checking if next is null
inc r10
cmp byte [r12+r10], NULL
je checkRange1
mov r11, 6
mul r11
jmp summingNumbersLoop1

checkRange1:
	cmp rax, R1_MIN
	jb incorrectR1
	cmp rax, R1_MAX
	ja incorrectR1
    pop rdx                         ; restoring rdx
    mov dword [rdx], eax            ; moving the summing register answer into radius 1

; Check for -r2
mov r12, [rsi+24]		; moving the second address of the input into r12
cmp dword [r12], "-r2"
jne invalidR2

mov r10, 0              ; index counter
mov r15, 0              ; temp summing register
mov rax, 0

; Checking -r2's value
mov r12, [rsi+32]		; Gets the address of the value for -r2

summingNumbersLoop2:
cmp byte [r12+r10], 0x30				; Compare r12 to 0 for base 6
jl incorrectR2			                ; if less than 0/NULL then its invalid 
cmp byte [r12+r10], 0x35				; Compare r12 to 5 for base 6
jg incorrectR2			                ; if greater than 5 then it is invalid 

mov r15b, byte [r12+r10]			; mov address of r12 into r15 
sub r15, 0x30			            ; subtract by hex 0
add rax, r15                        ; add the base 6 number to the summing register

; Checking if next is null
inc r10                         ; inc r10
cmp byte [r12+r10], NULL        ; look at the next value and see if it is null
je checkRange2                  ; if it equals null, jump to check the range of finished number
mov r11, 6                      ; if not null then put 6 in r11
mul r11                         ; multiply rax with r11
jmp summingNumbersLoop2         ; loop back

checkRange2:                ; checking if the answer is within the base 6 range
	cmp rax, R2_MIN 
	jb incorrectR2
	cmp rax, R2_MAX
	ja incorrectR2
    mov dword [rcx], eax        ; moving rax into rcx (radius 2)

; Check for -op
mov r12, [rsi+40]		; moving the second address of the input into r12
cmp dword [r12], "-op"
jne invalidOP

mov r10, 0              ; index counter
mov r15, 0              ; temp summing register
mov rax, 0

; Checking -op's value
mov r12, [rsi+48]		; Gets the address of the value for -op

summingNumbersLoop3:
cmp byte [r12+r10], 0x30				; Compare r12 to 0 for base 6
jl incorrectOP			                ; if less than 0/NULL then its invalid 
cmp byte [r12+r10], 0x35				; Compare r12 to 5 for base 6
jg incorrectOP			                ; if greater than 5 then it is invalid 

mov r15b, byte [r12+r10]			; mov address of r12 into r15 
sub r15, 0x30			            ; subtract by hex 0
add rax, r15                        ; add the base 6 number to the summing register

; Checking if next is null
inc r10                         ; inc r10
cmp byte [r12+r10], NULL        ; look at the next value and see if it is null
je checkRange3                  ; if it equals null, jump to check the range of finished number
mov r11, 6                      ; if not null then put 6 in r11
mul r11                         ; multiply rax with r11
jmp summingNumbersLoop3         ; loop back

checkRange3:                ; checking if the answer is within the base 6 range
	cmp rax, OP_MIN 
	jb incorrectOP
	cmp rax, OP_MAX
	ja incorrectOP
    mov dword [r8], eax        ; moving rax into r8 (offset position)

; Check for -sp
mov r12, [rsi+56]		; moving the second address of the input into r12
cmp dword [r12], "-sp"
jne invalidSP

mov r10, 0              ; index counter
mov r15, 0              ; temp summing register
mov rax, 0

; Checking -sp's value
mov r12, [rsi+64]		; Gets the address of the value for -sp

summingNumbersLoop4:
cmp byte [r12+r10], 0x30				; Compare r12 to 0 for base 6
jl incorrectSP			                ; if less than 0/NULL then its invalid 
cmp byte [r12+r10], 0x35				; Compare r12 to 5 for base 6
jg incorrectSP			                ; if greater than 5 then it is invalid 

mov r15b, byte [r12+r10]			; mov address of r12 into r15 
sub r15, 0x30			            ; subtract by hex 0
add rax, r15                        ; add the base 6 number to the summing register

; Checking if next is null
inc r10                         ; inc r10
cmp byte [r12+r10], NULL        ; look at the next value and see if it is null
je checkRange4                  ; if it equals null, jump to check the range of finished number
mov r11, 6                      ; if not null then put 6 in r11
mul r11                         ; multiply rax with r11
jmp summingNumbersLoop4         ; loop back

checkRange4:                ; checking if the answer is within the base 6 range
	cmp rax, SP_MIN 
	jb incorrectSP
	cmp rax, SP_MAX
	ja incorrectSP
    mov dword [r9], eax        ; moving rax into r9 (speed)

; Check for -cl
mov r12, [rsi+72]		; moving the fifth address of the input into r12
cmp dword [r12], "-cl"
jne invalidCL

; Checking -cl's value
    mov r12, [rsi+80]		; Gets the address of the value for -cl

redTest:
    cmp byte [r12], 'r'
    jne greenTest
    jmp colorFound

greenTest:
    cmp byte [r12], 'g'
    jne blueTest
    jmp colorFound

blueTest:
    cmp byte [r12], 'b'
    jne purpleTest
    jmp colorFound

purpleTest:
    cmp byte [r12], 'p'
    jne yellowTest
    jmp colorFound

yellowTest:
    cmp byte [r12], 'y'
    jne whiteTest
    jmp colorFound

whiteTest:
    cmp byte [r12], 'w'
    jne incorrectColor
    jmp colorFound

incorrectColor:
    jmp incorrectCL

colorFound:
    mov r13, qword [rbp+16]
    mov r12b, byte [r12]
    mov byte [r13], r12b

mov rax, TRUE
jmp return

usageError:         ; Throws error when ./spirograph is entered (shows the proper input)
mov rdi, errUsage
call printString
mov rax, FALSE
jmp return

badCL:              ; loads the error of bad command line and jumps to the return loop
mov rdi, errBadCL   ; moving the error code into rdi 
call printString    ; calling printstring to print the error
mov rax, FALSE
jmp return          ; jump to return loop

invalidR1:		    ; invalid R1 input, loads errR1sp into rdi
	mov rdi, errR1sp
	call printString
    mov rax, FALSE
	jmp return

incorrectR1:        ; out of range r1
	mov rdi, errR1value
	call printString
    mov rax, FALSE
	jmp return

invalidR2:          ; invalid R2 input, loads errR2sp into rdi
    mov rdi, errR2sp
    call printString
    mov rax, FALSE
    jmp return

incorrectR2:        ; out of range r2
    mov rdi, errR2value
    call printString
    mov rax, FALSE
    jmp return

invalidOP:          ; invalid OP input, loads errOPsp into rdi
    mov rdi, errOPsp
    call printString
    mov rax, FALSE
    jmp return

incorrectOP:        ; out of range OP
    mov rdi, errOPvalue
    call printString
    mov rax, FALSE
    jmp return

invalidSP:          ; invalid SP input, loads errSPsp into rdi
    mov rdi, errSPsp
    call printString
    mov rax, FALSE
    jmp return

incorrectSP:        ; out of range SP
    mov rdi, errSPvalue
    call printString
    mov rax, FALSE
    jmp return

invalidCL:          ; invalid CL input, loads errCLsp
    mov rdi, errCLsp
    call printString
    mov rax, FALSE
    jmp return

incorrectCL:        ; out of range CL, not one of the characters
    mov rdi, errCLvalue
    call printString
    mov rax, FALSE
    jmp return

return:             ; return loop for all the pushes and pops and return
    pop r15
    pop r14
    pop r13
    pop r12
    pop rbx
    mov rsp, rbp
    pop rbp
    ret

; ******************************************************************
;  Spirograph Plotting Function.

; -----
;  Color Code Conversion:
;	'r' -> red=255, green=0, blue=0
;	'g' -> red=0, green=255, blue=0
;	'b' -> red=0, green=0, blue=255
;	'p' -> red=255, green=0, blue=255
;	'y' -> red=255 green=255, blue=0
;	'w' -> red=255, green=255, blue=255
;  Note, set color before plot loop.

; -----
;  The loop is from 0.0 to 360.0 by tStep, can calculate
;  the number if iterations via:  iterations = 360.0 / tStep
;  This eliminates needing a float compare (a hassle).

; -----
;  Basic flow:
;	Set openGL drawing initializations
;	Loop initializations
;		Set draw color (i.e., glColor3ub)
;		Convert integer values to float for calculations
;		set 'sStep' variable
;		set 'iterations' variable
;	Plot the following spirograph equations:
;	     for (t=0.0; t<360.0; t+=step) {
;	         radii = (r1+r2)
;	         x = (radii * cos(t)) + (offPos * cos(radii * ((t+s)/r2)))
;	         y = (radii * sin(t)) + (offPos * sin(radii * ((t+s)/r2)))
;	         t += tStep
;	         plot point (x, y)
;	     }
;	Close openGL plotting (i.e., glEnd and glFlush)
;	Update s for next call (s += sStep)
;	Ensure openGL knows to call again (i.e., glutPostRedisplay)

; -----
;  The animation is accomplished by plotting a static
;	image, exiting the routine, and replotting a new
;	slightly different image.  The 's' variable controls
;	the phase or animation.

; -----
;  Global variables accessed
;	There are defined and set in the main, accessed herein by
;	name as per the below declarations.

common	radius1		1:4		; radius 1, dword, integer value
common	radius2		1:4		; radius 2, dword, integer value
common	offPos		1:4		; offset position, dword, integer value
common	speed		1:4		; rortation speed, dword, integer value
common	color		1:1		; color code letter, byte, ASCII value

global drawSpiro
drawSpiro:
	push	r12

; -----
;  Prepare for drawing
	; glClear(GL_COLOR_BUFFER_BIT);
	mov	rdi, GL_COLOR_BUFFER_BIT
	call	glClear

	; glBegin();
	mov	rdi, GL_POINTS
	call	glBegin

; -----
;  Set draw color(r,g,b)
;	Convert color letter to color values
;	Note, only legal color letters should be
;		passed to this procedure
;	Note, color values should be store in local
;		variables red, green, and blue

;	YOUR CODE GOES HERE

; First grab the letter from the stack (rbp+16)
; Then compare until you find which color it is
; Then jump to the particular labels that set the color
; Then call glColor3ub
; Then jump to plot loop
 
mov al, byte [color]

cmp al, 'r' 
je redFinal

cmp al, 'g'
je greenFinal

cmp al, 'b'
je blueFinal

cmp al, 'p'
je purpleFinal

cmp al, 'y'
je yellowFinal

cmp al, 'w'
je whiteFinal

redFinal:
    mov dil, 255
    mov sil, 0
    mov dl, 0
    call glColor3ub
    jmp plotStart

greenFinal:
    mov dil, 0
    mov sil, 255
    mov dl, 0
    call glColor3ub
    jmp plotStart

blueFinal:
    mov dil, 0
    mov sil, 0
    mov dl, 255
    call glColor3ub
    jmp plotStart

purpleFinal:
    mov dil, 255
    mov sil, 0
    mov dl, 255
    call glColor3ub
    jmp plotStart

yellowFinal:
    mov dil, 255
    mov sil, 255
    mov dl, 0
    call glColor3ub
    jmp plotStart

whiteFinal:
    mov dil, 255
    mov sil, 255
    mov dl, 255
    call glColor3ub
    jmp plotStart


; -----
;  Loop initializations and main plotting loop

; DATA I CAN USE

;fltOne		    dd	1.0
;fltZero		dd	0.0
;fltTmp1		dd	0.0
;fltTmp2		dd	0.0

;t		    dd	0.0			; loop variable
;s		    dd	1.0			; phase variable
;tStep		dd	0.005		; t step
;sStep		dd	0.0			; s step
;x		    dd	0.0			; current x
;y		    dd	0.0			; current y

;r1		    dd	0.0			; radius 1 (float)
;r2		    dd	0.0			; radius 2 (float)
;ofp		dd	0.0			; offset position (float)
;radii		dd	0.0			; tmp location for (radius1+radius2)

;scale		dd	5000.0		; speed scale
;limit		dd	360.0		; for loop limit
;iterations	dd	0			; set to 360.0/tStep

;	YOUR CODE GOES HERE

plotStart:

movss xmm14, dword [fltZero]          ; loading zero into xmm14
movss dword [t], xmm14                ; setting t to zero

; Calculating Iterations
movss xmm2, dword [limit]             ; putting the value 360.0 in xmm2
divss xmm2, dword [tStep]             ; dividing 360.0 by tStep
mov rax, 0                            ; clearing rax
cvtss2si rax, xmm2                    ; converting answer to interger
mov dword [iterations], eax           ; putting the value into iterations

; calculate sStep and put it in a register to inc s later
cvtsi2ss xmm12, dword [speed]         ; converting speed from int to single float and storing in xmm12
divss xmm12, dword [scale]            ; div by scale(already a float), sStep is in xmm12
movss dword [sStep], xmm12            ; move the value into sStep so that it doesn't get reset by calls

; Store sum of r1 and r2 into a register
cvtsi2ss xmm8, dword [radius1]        ; converting radius 2 to float and storing
movss dword [r1], xmm8
cvtsi2ss xmm9, dword [radius2]        ; converting radius 1 to float and storing
movss dword [r2], xmm9
movss xmm8, dword [r1]                ; storing r1 into xmm8
addss xmm8, dword [r2]                ; adding r1 and r2 (stored in xmm8)
movss dword [radii], xmm8             ; mov the sum into radii

cvtsi2ss xmm11, dword [offPos]        ; converting offset position to float and storing
movss dword [ofp], xmm11   

plotLoop:                             ; Beginning of loop

    ; find x
    movss xmm4, dword [t]           ; move t into temp reg
    addss xmm4, dword [s]           ; add t and s
    divss xmm4, dword [r2]          ; divide sum by r2
    movss xmm0, xmm4                ; moving answer from temp reg to xmm0
    mulss xmm0, dword [radii]       ; mul xmm0 by sum of r1 and r2
    call cosf                       ; mul xmm0 by cos
    mulss xmm0, dword [ofp]      ; mul xmm0 by offPos
    movss dword [fltTmp1], xmm0     ; store answer into a temp register
    
    movss xmm0, dword [t]           ; mov t into xmm0
    call cosf                       ; mul by cos (call cosf)
    mulss xmm0, dword [radii]       ; mul xmm0 by sum of r1 and r2
    addss xmm0, dword [fltTmp1]     ; sum xmm0 and xmm4 (fltTmp1 is holding the other answer)

    movss dword [x], xmm0


    ; find y
    movss xmm4, dword [t]           ; move t into temp reg
    addss xmm4, dword [s]           ; add t and s
    divss xmm4, dword [r2]                ; divide sum by r2
    movss xmm0, xmm4                ; moving answer from temp reg to xmm0
    mulss xmm0, dword [radii]       ; mul xmm0 by sum of r1 and r2
    call sinf                       ; mul xmm0 by cos
    mulss xmm0, dword [ofp]      ; mul xmm0 by offPos
    movss dword [fltTmp1], xmm0     ; store answer into a temp register
    
    movss xmm0, dword [t]           ; mov t into xmm0
    call sinf                       ; mul by cos (call cosf)
    mulss xmm0, dword [radii]       ; mul xmm0 by sum of r1 and r2 
    addss xmm0, dword [fltTmp1]     ; sum xmm0 and xmm4 (fltTmp1 is holding the other answer)

    movss dword [y], xmm0


    ; t += tStep
    movss xmm15, dword [t]          ; move the value of t into xmm15
    addss xmm15, dword [tStep]      ; add t and tStep
    movss dword [t], xmm15          ; move the result into t

    movss xmm0, dword [x]           ; set xmm0 and xmm1 before call
    movss xmm1, dword [y]
    call glVertex2f                 ; call glVertex2f(x1, y1)

    dec dword [iterations]          ; dec iterations
    cmp dword [iterations], 0       ; Comparing if the value in iterations is 0
    jne plotLoop                    ; if iterations is greater than or equal to limit then exit

endPlotLoop:

; -----
;  Plotting done.

	call	glEnd
	call	glFlush

; -----
;  Update s for next call.

;	YOUR CODE GOES HERE

movss xmm5, dword [s]               ; put value of s into xmm5
addss xmm5, dword [sStep]           ; Add sStep to xmm5
movss dword [s], xmm5               ; move value in xmm5 back to s

; -----
;  Ensure openGL knows to call again

	call	glutPostRedisplay
    
	pop	r12
	ret

; ******************************************************************
;  Generic function to display a string to the screen.
;  String must be NULL terminated.

;  Algorithm:
;	Count characters in string (excluding NULL)
;	Use syscall to output characters

;  Arguments:
;	- address, string
;  Returns:
;	nothing

global	printString
printString:

; -----
;  Count characters in string.

	mov	rbx, rdi			; str addr
	mov	rdx, 0
strCountLoop:
	cmp	byte [rbx], NULL
	je	strCountDone
	inc	rbx
	inc	rdx
	jmp	strCountLoop
strCountDone:

	cmp	rdx, 0
	je	prtDone

; -----
;  Call OS to output string.

	mov	rax, SYS_write			; system code for write()
	mov	rsi, rdi			; address of characters to write
	mov	rdi, STDOUT			; file descriptor for standard in
						; EDX=count to write, set above
	syscall					; system call

; -----
;  String printed, return to calling routine.

prtDone:
	ret

; ******************************************************************

